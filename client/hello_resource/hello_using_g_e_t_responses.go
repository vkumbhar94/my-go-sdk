// Code generated by go-swagger; DO NOT EDIT.

package hello_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HelloUsingGETReader is a Reader for the HelloUsingGET structure.
type HelloUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HelloUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 100:
		result := NewHelloUsingGETContinue()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 200:
		result := NewHelloUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHelloUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHelloUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHelloUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHelloUsingGETContinue creates a HelloUsingGETContinue with default headers values
func NewHelloUsingGETContinue() *HelloUsingGETContinue {
	return &HelloUsingGETContinue{}
}

/*HelloUsingGETContinue handles this case with default header values.

100 is the message
*/
type HelloUsingGETContinue struct {
}

func (o *HelloUsingGETContinue) Error() string {
	return fmt.Sprintf("[GET /rest/hello][%d] helloUsingGETContinue ", 100)
}

func (o *HelloUsingGETContinue) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHelloUsingGETOK creates a HelloUsingGETOK with default headers values
func NewHelloUsingGETOK() *HelloUsingGETOK {
	return &HelloUsingGETOK{}
}

/*HelloUsingGETOK handles this case with default header values.

Successful Hello World
*/
type HelloUsingGETOK struct {
	Payload string
}

func (o *HelloUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /rest/hello][%d] helloUsingGETOK  %+v", 200, o.Payload)
}

func (o *HelloUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *HelloUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloUsingGETUnauthorized creates a HelloUsingGETUnauthorized with default headers values
func NewHelloUsingGETUnauthorized() *HelloUsingGETUnauthorized {
	return &HelloUsingGETUnauthorized{}
}

/*HelloUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type HelloUsingGETUnauthorized struct {
}

func (o *HelloUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /rest/hello][%d] helloUsingGETUnauthorized ", 401)
}

func (o *HelloUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHelloUsingGETForbidden creates a HelloUsingGETForbidden with default headers values
func NewHelloUsingGETForbidden() *HelloUsingGETForbidden {
	return &HelloUsingGETForbidden{}
}

/*HelloUsingGETForbidden handles this case with default header values.

Forbidden
*/
type HelloUsingGETForbidden struct {
}

func (o *HelloUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /rest/hello][%d] helloUsingGETForbidden ", 403)
}

func (o *HelloUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHelloUsingGETNotFound creates a HelloUsingGETNotFound with default headers values
func NewHelloUsingGETNotFound() *HelloUsingGETNotFound {
	return &HelloUsingGETNotFound{}
}

/*HelloUsingGETNotFound handles this case with default header values.

Not Found
*/
type HelloUsingGETNotFound struct {
}

func (o *HelloUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /rest/hello][%d] helloUsingGETNotFound ", 404)
}

func (o *HelloUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
