// Code generated by go-swagger; DO NOT EDIT.

package hello_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HelloPutUsingPUTReader is a Reader for the HelloPutUsingPUT structure.
type HelloPutUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HelloPutUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHelloPutUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewHelloPutUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHelloPutUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHelloPutUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHelloPutUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHelloPutUsingPUTOK creates a HelloPutUsingPUTOK with default headers values
func NewHelloPutUsingPUTOK() *HelloPutUsingPUTOK {
	return &HelloPutUsingPUTOK{}
}

/*HelloPutUsingPUTOK handles this case with default header values.

OK
*/
type HelloPutUsingPUTOK struct {
	Payload string
}

func (o *HelloPutUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /rest/hello/put][%d] helloPutUsingPUTOK  %+v", 200, o.Payload)
}

func (o *HelloPutUsingPUTOK) GetPayload() string {
	return o.Payload
}

func (o *HelloPutUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloPutUsingPUTCreated creates a HelloPutUsingPUTCreated with default headers values
func NewHelloPutUsingPUTCreated() *HelloPutUsingPUTCreated {
	return &HelloPutUsingPUTCreated{}
}

/*HelloPutUsingPUTCreated handles this case with default header values.

Created
*/
type HelloPutUsingPUTCreated struct {
}

func (o *HelloPutUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /rest/hello/put][%d] helloPutUsingPUTCreated ", 201)
}

func (o *HelloPutUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHelloPutUsingPUTUnauthorized creates a HelloPutUsingPUTUnauthorized with default headers values
func NewHelloPutUsingPUTUnauthorized() *HelloPutUsingPUTUnauthorized {
	return &HelloPutUsingPUTUnauthorized{}
}

/*HelloPutUsingPUTUnauthorized handles this case with default header values.

Unauthorized
*/
type HelloPutUsingPUTUnauthorized struct {
}

func (o *HelloPutUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /rest/hello/put][%d] helloPutUsingPUTUnauthorized ", 401)
}

func (o *HelloPutUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHelloPutUsingPUTForbidden creates a HelloPutUsingPUTForbidden with default headers values
func NewHelloPutUsingPUTForbidden() *HelloPutUsingPUTForbidden {
	return &HelloPutUsingPUTForbidden{}
}

/*HelloPutUsingPUTForbidden handles this case with default header values.

Forbidden
*/
type HelloPutUsingPUTForbidden struct {
}

func (o *HelloPutUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /rest/hello/put][%d] helloPutUsingPUTForbidden ", 403)
}

func (o *HelloPutUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHelloPutUsingPUTNotFound creates a HelloPutUsingPUTNotFound with default headers values
func NewHelloPutUsingPUTNotFound() *HelloPutUsingPUTNotFound {
	return &HelloPutUsingPUTNotFound{}
}

/*HelloPutUsingPUTNotFound handles this case with default header values.

Not Found
*/
type HelloPutUsingPUTNotFound struct {
}

func (o *HelloPutUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /rest/hello/put][%d] helloPutUsingPUTNotFound ", 404)
}

func (o *HelloPutUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
